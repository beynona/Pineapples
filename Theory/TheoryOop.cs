namespace Pineapple_Educate;

// Объектно-ориентированное программирование (ООП)
public class TheoryOop
{
    // Наследование – это свойство системы, позволяющее описать новый класс на основе уже существующего
    // с частично или полностью заимствующейся функциональностью.
    // Класс, от которого производится наследование, называется базовым или родительским.
    // Новый класс – потомком, наследником или производным классом.
    class A
    {
        public string str;
    }
    class B : A
    {
        public int age;
       
        //В классе наследнике мы можем использовать и переменную str и age
    }
    
    
    // Полиморфизм – это свойство системы использовать объекты с одинаковым интерфейсом
    // без информации о типе и внутренней структуре объекта.
    // Это набор свойств и методов, которые могут быть переопределены в классе наследнике.
    class Pol
    {
        // Ключевое слово virtual показывает, что данный метод мы сможем переопределить в классе наследнике
        public virtual void Print()
        {
            Console.WriteLine("Hello");
        }
    }
    class Zet : Pol
    {
        // Ключевое слово override позволяет изменить логику метода из базового класса
        public override void Print()
        {
            Console.WriteLine("New hello!");
        }
    }


    // Абстракция - абстрактные классы нужны для того, чтобы сформировать общую логику,
    // от которой будут наследоваться другие классы и при том нам не нужны экземпляры самого абстрактного класса.
    // Пример:
    // Мы имеем базовый класс Human от которого будут насследоваться другие классы,
    // но экземпляр самого класса Human мы создавать никогда не будем.
    abstract class Human
    {
        public string Name { get; set; }
        protected Human(string name)
        {
            Name = name;
        }
    }
    class Employee : Human
    {
        public string Status { get; set; }
        public Employee(string name, string status) : base(name)
        {
            Status = status;
        }
    }
}