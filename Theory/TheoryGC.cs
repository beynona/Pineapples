namespace Pineapple_Educate;

public class TheoryGC
{
    // Управляемая память - память с которой работает приложение непосредственно через CLR.
    //          Работает автоматически. За памятью следит исполняемая среда CLR.
    //          Нам об управляемой памяти заботиться не надо
    // Неупраялемая память - мы сами должны следить за выделением и освобождением памяти.
    
    // При написании ключевго слова new мы создаём объект в куче.
    
    // GC (Garbage collector) - сборщик мусора в памяти (в куче) + её упорядочиваение (фрагментация)
    
    // Существуют 3 поколения объектов в памяти (куче): 
    // 0 поколение -
    //      Вновь созданные объекты. Проверяется ссылка на них в памяти, при отсутствии удаляет объект с памяти.
    //      Если ссылка на объект присутствует, то присваивается 1 поколение.
    //      Если приложению достаточно памяти объекты 1 поколения не проверяются,
    //      если памяти недостаточно проверяются объекты 1 поколения
    // 1 поколение -
    //      Упорядоченные объекты в куче с имеющейся ссылкой после 1 прохода GC.
    //      При повторной проверки объектов 1 поколения при наличии ссылки в стеке объекту присваивается 2 поколение
    // 2 поколение -
    //      Объектам присваивается 2 поколение, если при работе GC при 2 проходах на объект кучи была ссылка в стеке

    private static void TestGc()
    {
        // GC. - Класс для работы с Garbage collector
        // Метод Collect начинает принудительную сборку мусора до указанного поколения (0,1,2).
        // Если параметры отсутствует - проходится по всем поколениям
        GC.Collect(2);
        
        // Получить общий размер занятой памяти
        GC.GetTotalMemory(false);
    }
}